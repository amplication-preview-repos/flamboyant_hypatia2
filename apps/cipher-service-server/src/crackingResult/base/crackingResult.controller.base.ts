/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CrackingResultService } from "../crackingResult.service";
import { CrackingResultCreateInput } from "./CrackingResultCreateInput";
import { CrackingResult } from "./CrackingResult";
import { CrackingResultFindManyArgs } from "./CrackingResultFindManyArgs";
import { CrackingResultWhereUniqueInput } from "./CrackingResultWhereUniqueInput";
import { CrackingResultUpdateInput } from "./CrackingResultUpdateInput";

export class CrackingResultControllerBase {
  constructor(protected readonly service: CrackingResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CrackingResult })
  async createCrackingResult(
    @common.Body() data: CrackingResultCreateInput
  ): Promise<CrackingResult> {
    return await this.service.createCrackingResult({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        plaintext: true,
        ciphertext: true,
        key: true,
        rounds: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CrackingResult] })
  @ApiNestedQuery(CrackingResultFindManyArgs)
  async crackingResults(
    @common.Req() request: Request
  ): Promise<CrackingResult[]> {
    const args = plainToClass(CrackingResultFindManyArgs, request.query);
    return this.service.crackingResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        plaintext: true,
        ciphertext: true,
        key: true,
        rounds: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CrackingResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async crackingResult(
    @common.Param() params: CrackingResultWhereUniqueInput
  ): Promise<CrackingResult | null> {
    const result = await this.service.crackingResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        plaintext: true,
        ciphertext: true,
        key: true,
        rounds: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CrackingResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCrackingResult(
    @common.Param() params: CrackingResultWhereUniqueInput,
    @common.Body() data: CrackingResultUpdateInput
  ): Promise<CrackingResult | null> {
    try {
      return await this.service.updateCrackingResult({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          plaintext: true,
          ciphertext: true,
          key: true,
          rounds: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CrackingResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCrackingResult(
    @common.Param() params: CrackingResultWhereUniqueInput
  ): Promise<CrackingResult | null> {
    try {
      return await this.service.deleteCrackingResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          plaintext: true,
          ciphertext: true,
          key: true,
          rounds: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
