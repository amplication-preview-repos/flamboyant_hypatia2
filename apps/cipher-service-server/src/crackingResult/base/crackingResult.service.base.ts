/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CrackingResult as PrismaCrackingResult } from "@prisma/client";

export class CrackingResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CrackingResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.crackingResult.count(args);
  }

  async crackingResults(
    args: Prisma.CrackingResultFindManyArgs
  ): Promise<PrismaCrackingResult[]> {
    return this.prisma.crackingResult.findMany(args);
  }
  async crackingResult(
    args: Prisma.CrackingResultFindUniqueArgs
  ): Promise<PrismaCrackingResult | null> {
    return this.prisma.crackingResult.findUnique(args);
  }
  async createCrackingResult(
    args: Prisma.CrackingResultCreateArgs
  ): Promise<PrismaCrackingResult> {
    return this.prisma.crackingResult.create(args);
  }
  async updateCrackingResult(
    args: Prisma.CrackingResultUpdateArgs
  ): Promise<PrismaCrackingResult> {
    return this.prisma.crackingResult.update(args);
  }
  async deleteCrackingResult(
    args: Prisma.CrackingResultDeleteArgs
  ): Promise<PrismaCrackingResult> {
    return this.prisma.crackingResult.delete(args);
  }
}
