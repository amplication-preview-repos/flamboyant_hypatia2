/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CrackingResult } from "./CrackingResult";
import { CrackingResultCountArgs } from "./CrackingResultCountArgs";
import { CrackingResultFindManyArgs } from "./CrackingResultFindManyArgs";
import { CrackingResultFindUniqueArgs } from "./CrackingResultFindUniqueArgs";
import { CreateCrackingResultArgs } from "./CreateCrackingResultArgs";
import { UpdateCrackingResultArgs } from "./UpdateCrackingResultArgs";
import { DeleteCrackingResultArgs } from "./DeleteCrackingResultArgs";
import { CrackingResultService } from "../crackingResult.service";
@graphql.Resolver(() => CrackingResult)
export class CrackingResultResolverBase {
  constructor(protected readonly service: CrackingResultService) {}

  async _crackingResultsMeta(
    @graphql.Args() args: CrackingResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CrackingResult])
  async crackingResults(
    @graphql.Args() args: CrackingResultFindManyArgs
  ): Promise<CrackingResult[]> {
    return this.service.crackingResults(args);
  }

  @graphql.Query(() => CrackingResult, { nullable: true })
  async crackingResult(
    @graphql.Args() args: CrackingResultFindUniqueArgs
  ): Promise<CrackingResult | null> {
    const result = await this.service.crackingResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CrackingResult)
  async createCrackingResult(
    @graphql.Args() args: CreateCrackingResultArgs
  ): Promise<CrackingResult> {
    return await this.service.createCrackingResult({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CrackingResult)
  async updateCrackingResult(
    @graphql.Args() args: UpdateCrackingResultArgs
  ): Promise<CrackingResult | null> {
    try {
      return await this.service.updateCrackingResult({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CrackingResult)
  async deleteCrackingResult(
    @graphql.Args() args: DeleteCrackingResultArgs
  ): Promise<CrackingResult | null> {
    try {
      return await this.service.deleteCrackingResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
